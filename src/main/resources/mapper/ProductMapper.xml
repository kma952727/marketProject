<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.ProductMapper">
	<resultMap type="com.example.demo.model.Product" id="product_image_result">
		<result property="name" column="name"/>
		<result property="price" column="price"/>
		<result property="type" column="type"/>
		<result property="description" column="description"/>
		<result property="like" column="count(B.product_id)" />
		<result property="num" column="num"/>
		<result property="uploadTime" column="upload_time"/>
		<result property="endTime" column="end_time"/>
		<result property="phoneNumber" column="phone_number"/>
		<result property="productId" column="product_id"/>
		<collection property="productImageList" column="product_id" 
		ofType="com.example.demo.model.ProductImage" select="getProductImages"></collection>
		
	</resultMap>
	<select id="getProductImages" resultType="com.example.demo.model.ProductImage">
		select * from product_image where product_id = #{productId}
	</select>
	
	<insert id="insertProduct" useGeneratedKeys="true" keyProperty="id" >
		INSERT into product (
			name,
		    price,
		    type,
		    description,
		    num,
		    upload_time,
		    end_time,
		    phone_number,
		    account_id
		) value (
			#{name},
			#{price},
			#{type},
			#{description},
			#{num},
			#{uploadTime},
			#{endTime},
			#{phoneNumber},
			#{accountId}
		)
		<selectKey resultType="int" keyProperty="productId" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	<insert id="insertProductImage">
		
        INSERT INTO product_image (
            product_id,
           	original_image_name,
           	server_image_name,
           	size
        )
        VALUES
        <foreach item="item" collection="list" separator=",">
        (
            #{productId},
            #{item.originalImageName},
            #{item.serverImageName},
            #{item.size}         
        )
        </foreach>
	</insert>
	<select id="selectProducts" resultType="com.example.demo.model.Product">
		select 
			A.product_id, A.name, B.server_image_name, A.price, A.rating, A.type, A.hits
		from
	 		product A, product_image B 
	 	where
	 		<if test="type != 'all'">A.type = #{type} and</if>
	 		A.product_id = B.product_id group by A.product_id
	 	order by 
	 		A.product_id desc 
	 	limit 10;
	 	
 	</select>
 	<select id="searchProducts" resultType="com.example.demo.model.Product">
 		select 
			A.product_id, A.name, B.server_image_name, A.price, A.rating, A.type, A.hits
		from
	 		product A, product_image B 
	 	where
	 		A.product_id = B.product_id 
	 	and
	 		A.name like CONCAT('%',#{keyword},'%')
	 	group by 
	 		A.product_id
	 	order by 
	 		A.product_id desc 
	 	limit 10;
 	</select>
	<select id="selectProductById" resultMap="product_image_result">
		select 
			count(B.product_id), A.* from product A 
		left join
			product_like B
		on 
			A.product_id = B.product_id 
		where 
			A.product_id = #{productId};
	</select>
	<select id="countHits">
		update 
			product 
		set 
			hits = hits + 1
		where 
			product_id = #{productId}
	</select>
	<update id="updateProductLike">
		insert into 
			product_like 
		set 
			product_id = #{index}, account_id = #{accountId}, is_like = 1;
	</update>
	<select id="selectProductLike" resultType="String">
		select 
			ifnull((select product_id from product_like where product_id = #{productId} and
				account_id = #{accountId}), 'y')as 
		result;
	</select>
	<update id="updateProductNum">
		update 
			product
		set
			num = num - ${amount}
		where
			product_id = #{productId};		
	</update>
	<select id="selectParchase" resultType="com.example.demo.model.Product">
		select 
			* 
		from 
			purchase A
		inner join 
			product B
		on 
			A.product_id = B.product_id
		join 
			product_image C
		on 
			B.product_id = C.product_id
		group by 
			A.purchase_id 
		having 
			A.account_id = #{account_id}
		order by
			 A.purchase_id 
		desc;
	</select>
</mapper>